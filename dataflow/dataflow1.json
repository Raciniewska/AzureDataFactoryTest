{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Customers",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Orders",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join1"
				},
				{
					"name": "numberOfOrders"
				},
				{
					"name": "valueOfOrders"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customers as (customer as (address as (building as integer, city as string, country as string, postcode as integer, street as string), id as string, person as (age as short, lastname as string, name as string))[])",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     validationMode: 'none',",
				"     namespaces: true) ~> source1",
				"source(output(",
				"          id as string,",
				"          date as string,",
				"          value as string,",
				"          customer_id as string,",
				"          product_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['*.json']) ~> source2",
				"source1 foldDown(unroll(customers.customer),",
				"     mapColumn(",
				"          cust_id = customers.customer.id,",
				"          address = customers.customer.address,",
				"          person = customers.customer.person",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"source2 derive(currency = left(value,1),",
				"          value_decimal = toDecimal(dropLeft(value,1))) ~> derivedColumn1",
				"derivedColumn1 derive(value_in_pounds = iif(currency == \"$\", value_decimal*0.84, ",
				"iif(currency == \"â‚¬\", value_decimal*0.85, value_decimal))) ~> derivedColumn2",
				"flatten1, derivedColumn2 join(cust_id == customer_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(cust_id),",
				"     id = countDistinct(id)) ~> numberOfOrders",
				"join1 aggregate(groupBy(cust_id),",
				"     value_in_pounds = sum(value_in_pounds)) ~> valueOfOrders"
			]
		}
	}
}