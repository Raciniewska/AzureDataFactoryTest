{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Customers",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Orders",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CosmosDbSqlApiCollection1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join1"
				},
				{
					"name": "numberOfOrders"
				},
				{
					"name": "totalPurchaseValue"
				},
				{
					"name": "join2"
				},
				{
					"name": "addAvgPurchaseValue"
				},
				{
					"name": "join3"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customers as (customer as (address as (building as integer, city as string, country as string, postcode as integer, street as string), id as string, person as (age as short, lastname as string, name as string))[])",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     validationMode: 'none',",
				"     namespaces: true) ~> source1",
				"source(output(",
				"          id as string,",
				"          date as string,",
				"          value as string,",
				"          customer_id as string,",
				"          product_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['*.json']) ~> source2",
				"source1 foldDown(unroll(customers.customer),",
				"     mapColumn(",
				"          cust_id = customers.customer.id,",
				"          building = customers.customer.address.building,",
				"          city = customers.customer.address.city,",
				"          country = customers.customer.address.country,",
				"          postcode = customers.customer.address.postcode,",
				"          street = customers.customer.address.street,",
				"          age = customers.customer.person.age,",
				"          lastname = customers.customer.person.lastname,",
				"          name = customers.customer.person.name",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"source2 derive(currency = left(value,1),",
				"          value_decimal = toDecimal(dropLeft(value,1))) ~> derivedColumn1",
				"derivedColumn1 derive(value_in_pounds = iif(currency == \"$\", value_decimal*0.84, ",
				"iif(currency == \"â‚¬\", value_decimal*0.85, value_decimal))) ~> derivedColumn2",
				"flatten1, derivedColumn2 join(cust_id == customer_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(cust_id),",
				"     numberOfOrders = countDistinct(id)) ~> numberOfOrders",
				"join1 aggregate(groupBy(cust_id),",
				"     value_in_pounds = sum(value_in_pounds)) ~> totalPurchaseValue",
				"numberOfOrders, totalPurchaseValue join(numberOfOrders@cust_id == totalPurchaseValue@cust_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 derive(AvgPurchaseValue = value_in_pounds / numberOfOrders) ~> addAvgPurchaseValue",
				"addAvgPurchaseValue, flatten1 join(numberOfOrders@cust_id == flatten1@cust_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          cust_id = numberOfOrders@cust_id,",
				"          numberOfOrders,",
				"          valueInPounds = value_in_pounds,",
				"          AvgPurchaseValue,",
				"          building,",
				"          city,",
				"          country,",
				"          postcode,",
				"          street,",
				"          lastname,",
				"          name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'document',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}