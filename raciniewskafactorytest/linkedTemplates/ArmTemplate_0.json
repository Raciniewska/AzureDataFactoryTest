{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "raciniewskafactorytest"
		},
		"AzureBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage'"
		},
		"CosmosDb1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDb1'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDb1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDb1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customers.xml",
						"container": "customers"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "orders"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"date": {
							"type": "string"
						},
						"value": {
							"type": "string"
						},
						"customer_id": {
							"type": "string"
						},
						"product_id": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbSqlApiCollection1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDb1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {},
				"typeProperties": {
					"collectionName": "CustomerReport1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDb1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Customers",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Orders",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CosmosDbSqlApiCollection1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "join1"
						},
						{
							"name": "numberOfOrders"
						},
						{
							"name": "totalPurchaseValue"
						},
						{
							"name": "join2"
						},
						{
							"name": "addAvgPurchaseValue"
						},
						{
							"name": "join3"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customers as (customer as (address as (building as integer, city as string, country as string, postcode as integer, street as string), id as string, person as (age as short, lastname as string, name as string))[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     validationMode: 'none',",
						"     namespaces: true) ~> source1",
						"source(output(",
						"          id as string,",
						"          date as string,",
						"          value as string,",
						"          customer_id as string,",
						"          product_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['*.json']) ~> source2",
						"source1 foldDown(unroll(customers.customer),",
						"     mapColumn(",
						"          cust_id = customers.customer.id,",
						"          address = customers.customer.address,",
						"          person = customers.customer.person",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"source2 derive(currency = left(value,1),",
						"          value_decimal = toDecimal(dropLeft(value,1))) ~> derivedColumn1",
						"derivedColumn1 derive(value_in_pounds = iif(currency == \"$\", value_decimal*0.84, ",
						"iif(currency == \"â‚¬\", value_decimal*0.85, value_decimal))) ~> derivedColumn2",
						"flatten1, derivedColumn2 join(cust_id == customer_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 aggregate(groupBy(cust_id),",
						"     numberOfOrders = countDistinct(id)) ~> numberOfOrders",
						"join1 aggregate(groupBy(cust_id),",
						"     value_in_pounds = sum(value_in_pounds)) ~> totalPurchaseValue",
						"numberOfOrders, totalPurchaseValue join(numberOfOrders@cust_id == totalPurchaseValue@cust_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 derive(AvgPurchaseValue = value_in_pounds / numberOfOrders) ~> addAvgPurchaseValue",
						"addAvgPurchaseValue, flatten1 join(numberOfOrders@cust_id == flatten1@cust_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          cust_id = numberOfOrders@cust_id,",
						"          numberOfOrders,",
						"          valueOfOrdersInPounds = value_in_pounds,",
						"          AvgPurchaseValueInPounds = AvgPurchaseValue,",
						"          address,",
						"          person",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'document',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Customers')]",
				"[concat(variables('factoryId'), '/datasets/Orders')]",
				"[concat(variables('factoryId'), '/datasets/CosmosDbSqlApiCollection1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		}
	]
}